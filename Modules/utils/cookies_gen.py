# Modules/utils/cookies_gen.py

from selenium import webdriver
from selenium.webdriver.chrome.options import Options
import os
from io import BytesIO

def generate_dynamic_cookie():
    """
    Launch headless Chrome on Heroku, fetch cookies, and return as Netscape format string.
    """
    chrome_options = Options()
    chrome_options.add_argument('--headless')
    chrome_options.add_argument('--no-sandbox')
    chrome_options.add_argument('--disable-dev-shm-usage')
    chrome_options.binary_location = os.environ.get('GOOGLE_CHROME_BIN')

    driver = webdriver.Chrome(executable_path=os.environ.get('CHROMEDRIVER_PATH'), options=chrome_options)

    # Go to YouTube to let user login
    driver.get("https://www.youtube.com")

    input("Log in to YouTube")  # for manual login during dev/testing

    cookies = driver.get_cookies()
    driver.quit()

    # Build Netscape cookie format in memory
    cookie_text = "# Netscape HTTP Cookie File\n# Generated by @TNCnetwork\n\n"
    cookie_text += "# domain\t include_subdomains\t path\t secure\t expiration_date\t name\t value\n"
    for c in cookies:
        expiry = c.get('expiry') or c.get('expires') or 0
        cookie_text += (
            f"{c['domain']}\t"
            f"TRUE\t"
            f"{c['path']}\t"
            f"{'TRUE' if c.get('secure') else 'FALSE'}\t"
            f"{int(expiry)}\t"
            f"{c['name']}\t{c['value']}\n"
        )
    return cookie_text

def get_cookie_file_bytes(cookie_text: str):
    """
    Return an in-memory BytesIO file to send via Pyrogram.
    """
    return BytesIO(cookie_text.encode('utf-8'))
